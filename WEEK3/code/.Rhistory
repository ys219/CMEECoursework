fstats<- c()
for(i in models){
fstats<-c(i$fstatistic[1])
}
fstats
for(i in models){
fstats<-c(fstats,i$fstatistic[1])
}
forcsv$f_statistic <- fstats
View(forcsv)
#intercept
inter <- c()
for(i in md){
inter<-c(inter, i[1])
}
forcsv$intercept <- inter
#slope i[2]
slope <- c()
for(i in md){
slope<-c(slope, i[2])
}
forcsv$slope <- slope
##r^2
r2<- c()
for(i in models){
r2<-c(r2,i$r.squared)
}
forcsv$R_squared <- r2
###fstatistics
fstats<- c()
for(i in models){
fstats<-c(fstats,i$fstatistic[1])
}
forcsv$f_statistic <- fstats
##### p value i[1,4]
pvalue <- c()
for(i in md){
pvalue<-c(pvalue, i[2])
}
forcsv$pvalue <- pvalue
View(forcsv)
wranged<- subset(MyDF, select = -c(Location,Prey.mass.unit,Prey.taxon,Prey.common.name,Prey,Predator.taxon,Predator.common.name,Predator,IndividualID,In.refID,Record.number))
wranged<- tidyr::unite(wranged,"lifestageXfeedingtype",Predator.lifestage:Type.of.feeding.interaction, sep = "X")
forcsv<- subset(wranged,select = -c(Prey.mass,Predator.mass))
forcsv<-unique(forcsv)
##get all lm
models<- lmList(Predator.mass~Prey.mass | lifestageXfeedingtype, data = wranged)
##get all summary
models<-lapply(models, function(models) {
summary(models)
})
##extract all coefficient
md<-lapply(models,function(m){
coef(m)
})
#intercept
inter <- c()
for(i in md){
inter<-c(inter, i[1])
}
forcsv$intercept <- inter
#slope i[2]
slope <- c()
for(i in md){
slope<-c(slope, i[2])
}
forcsv$slope <- slope
##r^2
r2<- c()
for(i in models){
r2<-c(r2,i$r.squared)
}
forcsv$R_squared <- r2
###fstatistics
fstats<- c()
for(i in models){
fstats<-c(fstats,i$fstatistic[1])
}
forcsv$f_statistic <- fstats
##### p value i[1,4]
pvalue <- c()
for(i in md){
pvalue<-c(pvalue, i[2])
}
forcsv$pvalue <- pvalue
View(forcsv)
write.csv(forcsv,"../results/PP_Regress_Result.csv")
wranged<- subset(MyDF, select = -c(Location,Prey.mass.unit,Prey.taxon,Prey.common.name,Prey,Predator.taxon,Predator.common.name,Predator,IndividualID,In.refID,Record.number))
wranged<- tidyr::unite(wranged,"lifestageXfeedingtype",Predator.lifestage:Type.of.feeding.interaction, sep = "X")
forcsv<- subset(wranged,select = -c(Prey.mass,Predator.mass))
forcsv<-unique(forcsv)
##get all lm
models<- lmList(Predator.mass~Prey.mass | lifestageXfeedingtype, data = wranged)
##get all summary
models<-lapply(models, function(models) {
summary(models)
})
##extract all coefficient
md<-lapply(models,function(m){
coef(m)
})
#intercept
inter <- c()
for(i in md){
inter<-c(inter, i[1])
}
forcsv$intercept <- inter
#slope i[2]
slope <- c()
for(i in md){
slope<-c(slope, i[2])
}
forcsv$slope <- slope
##r^2
r2<- c()
for(i in models){
r2<-c(r2,i$r.squared)
}
forcsv$R_squared <- r2
###fstatistics
fstats<- c()
for(i in models){
fstats<-c(fstats,i$fstatistic[1])
}
forcsv$f_statistic <- fstats
##### p value i[1,4]
pvalue <- c()
View(forcsv)
###fstatistics
fstats<- c()
for(i in models){
fstats<-c(fstats,i$fstatistic[1])
}
###fstatistics
fstats<- c()
for(i in models){
fstats<-c(fstats,i$fstatistic)
}
forcsv$f_statistic <- fstats
###fstatistics
fstats<- c()
for(i in models){
fstats<-c(fstats,i$fstatistic[1])
}
fstats<-c(fstats,"na")
forcsv$f_statistic <- fstats
##### p value i[1,4]
pvalue <- c()
for(i in md){
pvalue<-c(pvalue, i[2])
}
forcsv$pvalue <- pvalue
write.csv(forcsv,"../results/PP_Regress_Result.csv")
setwd("~/Documents/CMEECoursework/WEEK3/code")
a <- read.table("../data/Results.txt", header = TRUE)
a$ymin <- rep(0, dim(a)[1]) # append a column of zeros
# Print the first linerange
p <- ggplot(a)
p <- p + geom_linerange(data = a, aes(
x = x,
ymin = ymin,
ymax = y1,
size = (0.5)
),
colour = "#E69F00",
alpha = 1/2, show.legend = FALSE)
setwd("~/Documents/CMEECoursework/WEEK3/code")
a <- read.table("../data/Results.txt", header = TRUE)
library(ggplot2)
a$ymin <- rep(0, dim(a)[1]) # append a column of zeros
# Print the first linerange
p <- ggplot(a)
p <- p + geom_linerange(data = a, aes(
x = x,
ymin = ymin,
ymax = y1,
size = (0.5)
),
colour = "#E69F00",
alpha = 1/2, show.legend = FALSE)
# Print the second linerange
p <- p + geom_linerange(data = a, aes(
x = x,
ymin = ymin,
ymax = y2,
size = (0.5)
),
colour = "#56B4E9",
alpha = 1/2, show.legend = FALSE)
# Print the third linerange:
p <- p + geom_linerange(data = a, aes(
x = x,
ymin = ymin,
ymax = y3,
size = (0.5)
),
colour = "#D55E00",
alpha = 1/2, show.legend = FALSE)
# Annotate the plot with labels:
p <- p + geom_text(data = a, aes(x = x, y = -500, label = Label))
# now set the axis labels, remove the legend, and prepare for bw printing
p <- p + scale_x_continuous("My x axis",
breaks = seq(3, 5, by = 0.05)) +
scale_y_continuous("My y axis") +
theme_bw() +
theme(legend.position = "none")
p
pdf("../results/MyBars.pdf")
print(p)
dev.off()
statsmodel<-lm(y~x)
y<- c(3,4,5,7,9)
statsmodel<-lm(y~x)
x<- c(1,2,3,4,8)
statsmodel<-lm(y~x)
statsmodel
summary(statsmodel)
anova(statsmodel)
resid(statsmodel)
cov(x,y)
var(x)
plot(y~x)
?cov
summary(statsmodel)
statsmodel<-lm(y~x)
statsmodel
##Coefficients:
#(Intercept)            x
#2.493        0.863
summary(statsmodel)
cov(x,y)
statsmodel
anova(statsmodel)
##Coefficients:
#(Intercept)            x
#2.493        0.863
summary(statsmodel)
anova(statsmodel)
plot(statsmodel)
par(mfrow=c(2,2))
plot(statsmodel)
setwd("/home/yige/Downloads/HandOutsandData")
setwd("/home/yige/Downloads/HandOutsandData'18")
d<-read.table("SparrowSize.txt", header = TRUE)
View(adlm)
plot(d$Mass~d$Tarsus, ylab= "Mass(g)", xlab = "Tarsus(mm)", pch=19,cex=0.4, ylim=c(-5,38), xlim=c(0,22))
par(mfrow=c(1,1))
plot(d$Mass~d$Tarsus, ylab= "Mass(g)", xlab = "Tarsus(mm)", pch=19,cex=0.4, ylim=c(-5,38), xlim=c(0,22))
plot(d$Mass~d$Tarsus, ylab= "Mass(g)", xlab = "Tarsus(mm)", pch=19,cex=0.4)
d1<-subset(d, d$Mass != "NA")
d2 <- subset(d1, d1$Tarsus != "NA")
statsmodel<- lm(Mass~Tarsus, data=d2)
summary(statsmodel)
hist(statsmodel$residuals)
head(statsmodel$residuals)
x<- c(1:100)
b<- 0.5
m<- 1.5
y<-m*x+b
plot(d$Mass~d$Tarsus, ylab= "Mass(g)", xlab = "Tarsus(mm)", pch=19,cex=0.4)
abline(lm(d$Mass~d$Tarsus))
plot(d2$Mass~d2$Tarsus, ylab= "Mass(g)", xlab = "Tarsus(mm)", pch=19,cex=0.4)
abline(lm(d2$Mass~d2$Tarsus))
summary(d2)
sum(d2)
print(i)
View(d2)
for(i in d2){
sum(i)
}
for(i in d){
sum(i)
}
as.data.frame(table(d2))
as.data.frame(table(d))
View(d)
table(d2$Year)
for(i in d2$){
table(i)
}
for(i in d2){
table(i)
}
View(d2)
whatev<-for(i in d2$i){
table(i)
}
apply(d2,table)
apply(d2,table())
View(d2)
View(d2)
apply(d2,2:7,table())
View(d2)
d2$z.Tarsus <- scale(d2$Tarsus)
statsmodel3<-lm(Mass~z.Tarsus, data = d2)
summary(statsmodel3)
plot(d2$Mass~d2$z.Tarsus, pch=19, cex=0.4)
abline(v=0, lty="doted")
abline(v=0, lty="dotted")
head(d)
str(d)
setwd("/home/yige/Documents/CMEECoursework/WEEK3/code")
load("../data/GPDDFiltered.RData")
library(maps)
map("world", fill = FALSE, mar = c(0,0,0,0))
points(y=gpdd$lat, x=gpdd$long,pch=16, cex=0.5,col = "red")
p <- ggplot(MyDF, aes(Prey.mass, Predator.mass, color= Predator.lifestage))
library(ggplot2)
library(nlme)
setwd('/home/yige/Documents/CMEECoursework/WEEK3/code')
MyDF <- read.csv("../data/EcolArchives-E089-51-D1.csv")
p <- ggplot(MyDF, aes(Prey.mass, Predator.mass, color= Predator.lifestage))
p<- p +
scale_y_continuous(trans = "log10")+
geom_point(shape = I(3))+
facet_grid(vars(Type.of.feeding.interaction))+
theme_bw()+
theme(legend.position = "bottom",legend.direction  = "horizontal",aspect.ratio = 0.5)+
labs(x = "Prey Mass in grams", y = "Predator Mass in grams")+
geom_smooth(method = "lm", fullrange = T)
p
setwd('/home/yige/Documents/CMEECoursework/WEEK3/code')
MyDF <- read.csv("../data/EcolArchives-E089-51-D1.csv")
p <- ggplot(MyDF, aes(Prey.mass, Predator.mass, color= Predator.lifestage))
p<- p +
scale_y_continuous(trans = "log10")+
geom_point(shape = I(3))+
facet_grid(vars(Type.of.feeding.interaction))+
theme_bw()+
theme(legend.position = "bottom",legend.direction  = "horizontal",aspect.ratio = 0.5)+
labs(x = "Prey Mass in grams", y = "Predator Mass in grams")+
geom_smooth(method = "lm", fullrange = T)
setwd('/home/yige/Documents/CMEECoursework/WEEK3/code')
MyDF <- read.csv("../data/EcolArchives-E089-51-D1.csv")
p <- ggplot(MyDF, aes(Prey.mass, Predator.mass, color= Predator.lifestage))
p<- p +
scale_y_continuous(trans = "log10")+
scale_x_continuous(trans = "log10")+
geom_point(shape = I(3))+
facet_grid(vars(Type.of.feeding.interaction))+
theme_bw()+
theme(legend.position = "bottom",legend.direction  = "horizontal",aspect.ratio = 0.5)+
labs(x = "Prey Mass in grams", y = "Predator Mass in grams")+
geom_smooth(method = "lm", fullrange = T)
p
?scale_x_continuous
?scale_x_log10
setwd("~/Documents/CMEECoursework/WEEK3/code")
a <- read.table("../data/Results.txt", header = TRUE)
library(ggplot2)
a$ymin <- rep(0, dim(a)[1]) # append a column of zeros
# Print the first linerange
p <- ggplot(a)
p <- p + geom_linerange(data = a, aes(
x = x,
ymin = ymin,
ymax = y1,
size = (0.5)
),
colour = "#E69F00",
alpha = 1/2, show.legend = FALSE)
# Print the second linerange
p <- p + geom_linerange(data = a, aes(
x = x,
ymin = ymin,
ymax = y2,
size = (0.5)
),
colour = "#56B4E9",
alpha = 1/2, show.legend = FALSE)
# Print the third linerange:
p <- p + geom_linerange(data = a, aes(
x = x,
ymin = ymin,
ymax = y3,
size = (0.5)
),
colour = "#D55E00",
alpha = 1/2, show.legend = FALSE)
# Annotate the plot with labels:
p <- p + geom_text(data = a, aes(x = x, y = -500, label = Label))
# now set the axis labels, remove the legend, and prepare for bw printing
p <- p + scale_x_continuous("My x axis",
breaks = seq(3, 5, by = 0.05)) +
scale_y_continuous("My y axis") +
theme_bw() +
theme(legend.position = "none")
p
pdf("../results/MyBars.pdf")
print(p)
dev.off()
a <- NA
for (i in 1:10) {
a <- c(a, i)
print(a)
print(object.size(a))
}
a <- rep(NA, 10)
for (i in 1:10) {
a[i] <- i
print(a)
print(object.size(a))
}
Exponential <- function(N0 = 1, r = 1, generations = 10){
# Runs a simulation of exponential growth
# Returns a vector of length generations
N <- rep(NA, generations)    # Creates a vector of NA
N[1] <- N0
for (t in 2:generations){
N[t] <- N[t-1] * exp(r)
browser()
}
return (N)
}
plot(Exponential(), type="l", main="Exponential growth")
function(N0 = 1, r = 1, generations = 10){
# Runs a simulation of exponential growth
# Returns a vector of length generations
N <- rep(NA, generations)    # Creates a vector of NA
N[1] <- N0
for (t in 2:generations){
N[t] <- N[t-1] * exp(r)
browser()
}
return (N)
}
meanprey<-tapply(MyDF$Prey.mass/ MyDF$Predator.mass, MyDF$Type.of.feeding.interaction, mean)
library(lattice)
MyDF <- read.csv("../data/EcolArchives-E089-51-D1.csv")
densityplot(~log(Predator.mass) | Type.of.feeding.interaction, data = MyDF)
densityplot(~log(Prey.mass) | Type.of.feeding.interaction, data = MyDF)
densityplot(~log(Prey.mass/Predator.mass) | Type.of.feeding.interaction, data = MyDF)
pdf("../results/Pred_Lattice.pdf",11.7,8.3)
densityplot(~log(Predator.mass) | Type.of.feeding.interaction, data = MyDF)
graphics.off()
pdf("../results/Prey_Lattice.pdf",11.7,8.3)
densityplot(~log(Prey.mass) | Type.of.feeding.interaction, data = MyDF)
graphics.off()
pdf("../results/SizeRatio_Lattice.pdf",11.7,8.3)
densityplot(~log(Prey.mass/Predator.mass) | Type.of.feeding.interaction, data = MyDF)
graphics.off()
meanpred<-tapply(MyDF$Predator.mass, MyDF$Type.of.feeding.interaction, mean)
meanprey<-tapply(MyDF$Prey.mass, MyDF$Type.of.feeding.interaction, mean)
meanpp<-tapply(MyDF$Prey.mass/ MyDF$Predator.mass, MyDF$Type.of.feeding.interaction, mean)
meanpp
medpp<-tapply(MyDF$Prey.mass/ MyDF$Predator.mass, MyDF$Type.of.feeding.interaction, median)
meamed <- data.frame(predator_mean = meanpred, prey_mean = meanprey, predator_median = medpred, prey_median = medprey)
meamed <- data.frame(predator_mean = meanpred, prey_mean = meanprey, ppratio_mean = meanpp, predator_median = medpred, prey_median = medprey, ppratio_median = medpp)
meanpred<-tapply(MyDF$Predator.mass, MyDF$Type.of.feeding.interaction, mean)
meanprey<-tapply(MyDF$Prey.mass, MyDF$Type.of.feeding.interaction, mean)
meanpp<-tapply(MyDF$Prey.mass/ MyDF$Predator.mass, MyDF$Type.of.feeding.interaction, mean)
medpred<-tapply(MyDF$Predator.mass, MyDF$Type.of.feeding.interaction, median)
medprey<-tapply(MyDF$Prey.mass, MyDF$Type.of.feeding.interaction, median)
medpp<-tapply(MyDF$Prey.mass/ MyDF$Predator.mass, MyDF$Type.of.feeding.interaction, median)
meamed <- data.frame(predator_mean = meanpred, prey_mean = meanprey, ppratio_mean = meanpp, predator_median = medpred, prey_median = medprey, ppratio_median = medpp)
write.csv(meamed, file = "../results/PP_Results.csv")
View(meamed)
library(ggplot2)
build_ellipse <- function(hradius, vradius){ # function that returns an ellipse
npoints = 250
a <- seq(0, 2 * pi, length = npoints + 1)
x <- hradius * cos(a)
y <- vradius * sin(a)
return(data.frame(x = x, y = y))
}
N <- 250 # Assign size of the matrix
M <- matrix(rnorm(N * N), N, N) # Build the matrix
eigvals <- eigen(M)$values # Find the eigenvalues
eigDF <- data.frame("Real" = Re(eigvals), "Imaginary" = Im(eigvals)) # Build a dataframe
my_radius <- sqrt(N) # The radius of the circle is sqrt(N)
ellDF <- build_ellipse(my_radius, my_radius) # Dataframe to plot the ellipse
names(ellDF) <- c("Real", "Imaginary") # rename the columns
##plot the eipgenvalues
p <- ggplot(eigDF, aes(x = Real, y = Imaginary))
p <- p +
geom_point(shape = I(3)) +
theme(legend.position = "none")
# now add the vertical and horizontal line
p <- p + geom_hline(aes(yintercept = 0))
p <- p + geom_vline(aes(xintercept = 0))
# finally, add the ellipse
p <- p + geom_polygon(data = ellDF, aes(x = Real, y = Imaginary, alpha = 1/20, fill = "red"))
p
#######mathmatical display
library(ggplot2)
x <- seq(0, 100, by = 0.1)
y <- -4. + 0.25 * x +
rnorm(length(x), mean = 0., sd = 2.5)
# and put them in a dataframe
my_data <- data.frame(x = x, y = y)
# perform a linear regression
my_lm <- summary(lm(y ~ x, data = my_data))
# plot the data
p <-  ggplot(my_data, aes(x = x, y = y,
colour = abs(my_lm$residual))
) +
geom_point() +
scale_colour_gradient(low = "black", high = "red") +
theme(legend.position = "none") +
scale_x_continuous(
expression(alpha^2 * pi / beta * sqrt(Theta)))
# add the regression line
p <- p + geom_abline(
intercept = my_lm$coefficients[1][1],
slope = my_lm$coefficients[2][1],
colour = "red")
# throw some math on the plot
p <- p + geom_text(aes(x = 60, y = 0,
label = "sqrt(alpha) * 2* pi"),
parse = TRUE, size = 6,
colour = "blue")
p
